prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>

#################################################
# identificar componentes conexos das respostas #
#################################################

# iteracao 1
with kwsg:temp
insert {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
using kwsg:temp
where {
  {
    select ?s (bnode() as ?bag)
    where {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
    }
    limit 1
  }
  {
    ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
    filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
  }
};

# iteracao 2
with kwsg:temp
insert {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
using kwsg:temp
where {
  {
    select ?s (bnode() as ?bag)
    where {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
    }
    limit 1
  }
  {
    ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
    filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
  }
};

# iteracao 3
with kwsg:temp
insert {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
using kwsg:temp
where {
  {
    select ?s (bnode() as ?bag)
    where {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
    }
    limit 1
  }
  {
    ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
    filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
  }
};

# iteracao 4
with kwsg:temp
insert {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
using kwsg:temp
where {
  {
    select ?s (bnode() as ?bag)
    where {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
    }
    limit 1
  }
  {
    ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
    filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
  }
};

# iteracao 5
with kwsg:temp
insert {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
using kwsg:temp
where {
  {
    select ?s (bnode() as ?bag)
    where {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
    }
    limit 1
  }
  {
    ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
    filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
  }
};


