#STEP 1: Calcular as sementes de uma busca

PREFIX kws: <urn:vocab:kws:>
PREFIX kwsg: <urn:graph:kws:>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX text: <http://jena.apache.org/text#>
PREFIX quira: <http://www.quira.org/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>


WITH kwsg:seeds
INSERT {?bag a rdf:Bag; rdfs:member ?s.
        ?s kws:luceneScore ?score;
           kws:maxLuceneScore ?max_score_lucene;
           kws:inforankNormalized ?inforankNormalized;
           kws:score ?score_final.}
WHERE{
    {BIND(bnode() as ?bag)}
    {
        #junção R1 com R2 (natural join) para cada linha da relação executar a normalização.
        SELECT ?s
                ?score
                ?max_score_lucene
                ?inforankNormalized
                (?score / ?max_score_lucene as ?score_normalizado)
                (((?score / ?max_score_lucene) + ?inforankNormalized)/2 as ?score_final)
        WHERE {
        # relação R1 com uma coluna contentdo o maior score lucene
        service <%1$s>{
            {
                SELECT  ?max_score_lucene
                WHERE{
                        GRAPH kwsg:indexed{
                            (?s ?max_score_lucene) text:query (kws:comment '%2$s' 1).
                        }
                }
            }
            {
                {
                    SELECT ?s (max(?score_) as ?score)
                    WHERE{
                        GRAPH kwsg:indexed{
                            (?s ?score_) text:query (kws:comment '%2$s').
                        }
                    }
                    GROUP BY ?s
                }
                ?s quira:inforankNormalized ?inforankNormalized.
            }
        }
        FILTER (((?score / ?max_score_lucene) + ?inforankNormalized)/2 > 0.0)
        }
        ORDER BY DESC(?score_final)
        LIMIT 5
    }
}