prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix fn: <java:uff.ic.swlab.jena.sparql.function.>
prefix text: <http://jena.apache.org/text#>
prefix quira: <http://www.quira.org/>
PREFIX agg: <http://uff.ic.swlab.jena.sparql.aggregate/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>


######################################################################################################
# Trazer matching triples das propriedades encontradas nos solution generartors
######################################################################################################
INSERT {GRAPH ?sol {?p rdfs:label ?label.}}
WHERE{
         # retorna nx2 relação dos predicados que tem dentro do S.G
            { SELECT DISTINCT ?sol ?p
                    WHERE{
                            GRAPH ?sol{
                                [] ?p [].
                                FILTER(!regex(str(?p),"http://www.w3.org/1999/02/22-rdf-syntax-ns#type")
                                        && (!regex(str(?p),"http://www.w3.org/2000/01/rdf-schema#label"))
                                        && (!regex(str(?p),"urn:vocab:kws:size")))
                            }
                            FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
                    }
        }
        # retorna relação dos predicados que batem com alguma keyword dentro dos S.G

            SERVICE <%2$s>{
                            {
                                graph kwsg:indexed{
                                  (?p ?score ?label) text:query (kws:comment '%1$s').

                                }
                                filter (exists {[] ?p []})
                            }


            }

};




#######################################################################################################
# Trazer matching triples das propriedades utilizadas por entidades dos solution generators
#######################################################################################################



INSERT {GRAPH ?sol {?p rdfs:label ?label. ?s ?p ?v. ?s_ ?p ?o. ?v_ ?p ?s.}}
WHERE{
    SERVICE <%2$s>{
        SELECT DISTINCT ?s ?p ?v ?label ?v_
        where {
            graph kwsg:indexed {
                (?p ?score ?label) text:query (kws:comment '%1$s').

            }
            filter (exists {[] ?p []})
            {?s ?p ?v.} UNION {?s_ ?p ?o.} UNION {?v_ ?p ?s.}
        }
    }

    #retorna relação de todas as entidades dentro de S.G
    optional {
        SELECT DISTINCT ?sol ?s ?o
        {
            GRAPH ?sol{
                ?s ?p__ ?o.
                FILTER(!regex(str(?s),"urn:graph:kws:[0-9]{3}:sol"))
            }
            FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
        }
    }
    FILTER NOT EXISTS{GRAPH ?sol{ ?s ?p ?o.
                                    bind (COALESCE(?sol,iri(concat("%5$s","sol",str(fn:sequential())))) as ?sol)}}

};