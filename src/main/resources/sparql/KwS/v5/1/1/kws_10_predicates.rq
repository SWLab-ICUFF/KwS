prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix fn: <java:uff.ic.swlab.jena.sparql.function.>
prefix text: <http://jena.apache.org/text#>
prefix quira: <http://www.quira.org/>
PREFIX agg: <http://uff.ic.swlab.jena.sparql.aggregate/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>


############################################################################################
# criando uri nomeada da solução e calcular a quantidade de entidades novas em cada solução
#############################################################################################

INSERT {graph ?sol {?sol kws:size ?size}}
WHERE{
	SELECT ?sol (count(distinct ?entity) as ?size)
WHERE{
  GRAPH ?sol {
    {?entity ?p []} UNION {[] ?p ?entity}
    FILTER(!isBlank(?entity) && !isLiteral(?entity))
  }
   FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
}
GROUP BY ?sol
};



############################################################################################
# Armazenando as propriedades das seeds nos grupos de soluções
#############################################################################################
INSERT {graph ?sol {?s ?p ?o}}
WHERE{
    {
    	GRAPH kwsg:seeds{
        	?s kws:matchingPredicate ?p.
       	 	?s kws:value ?o.

    	}
        GRAPH ?sol {?s ?p2 [].}
        FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
    }
    UNION
    {
    	GRAPH kwsg:seeds{
        	?s kws:matchingPredicate ?p.
        	?s kws:value ?o.
    	}
        GRAPH ?sol {[] ?p2 ?s.}
        FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
    }
};

############################################################################################
# Armazenando as propriedades das novas entidades
#############################################################################################

INSERT {graph ?sol {?s ?p ?o}}
WHERE{
       SERVICE <%2$s> {
            SERVICE <%3$s> {
                                {
                                  SELECT DISTINCT ?s
                                  WHERE{
                                           {
                                                GRAPH ?sol {?s ?p2 []. filter (not exists {graph kwsg:seeds {?s ?p [].}})}
                                                FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
                                            }UNION{
                                                GRAPH ?sol {[] ?p2 ?s. filter (not exists {graph kwsg:seeds {?s ?p [].}})}
                                                FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
                                            }
  						FILTER(!regex(str(?s),"urn:graph:kws:[0-9]{3}:sol") && isuri(?s))
                                  }
                                }
                                graph kwsg:indexed{
                                    (?s ?score ?literal) text:query (kws:comment '%4$s').
                                    ?s ?p ?literal.
                                }
                            }
		}
  		{
                   GRAPH ?sol {?s ?p2 []. FILTER (NOT EXISTS {GRAPH kwsg:seeds {?s ?p [].}})}
                   FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol") && isuri(?s))
                }UNION{
                    GRAPH ?sol {[] ?p2 ?s. filter (NOT EXISTS {GRAPH kwsg:seeds {?s ?p [].}})}
                    FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol") && isuri(?s))
   		}

};



######################################################################################################
# Trazer matching triples das propriedades encontradas nos solution generartors
######################################################################################################
INSERT {GRAPH ?sol {?p rdfs:label ?label.}}
WHERE{
         # retorna nx2 relação dos predicados que tem dentro do S.G
            { SELECT DISTINCT ?sol ?p
                    WHERE{
                            GRAPH ?sol{
                                [] ?p [].
                                FILTER(!regex(str(?p),"http://www.w3.org/1999/02/22-rdf-syntax-ns#type")
                                        && (!regex(str(?p),"http://www.w3.org/2000/01/rdf-schema#label"))
                                        && (!regex(str(?p),"urn:vocab:kws:size")))
                            }
                            FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
                    }
        }
        # retorna relação dos predicados que batem com alguma keyword dentro dos S.G

            SERVICE <%2$s>{
                            {
                                graph kwsg:indexed{
                                  (?p ?score ?label) text:query (kws:comment '%1$s').

                                }
                                filter (exists {[] ?p []})
                            }


            }

};




#######################################################################################################
# Trazer matching triples das propriedades utilizadas por entidades dos solution generators
#######################################################################################################



INSERT {GRAPH ?sol {?p rdfs:label ?label. ?s ?p ?v.}}
WHERE{


    SERVICE <%2$s>{

        SELECT DISTINCT ?s ?p ?v ?label
        where {
            graph kwsg:indexed {
                (?p ?score ?label) text:query (kws:comment '%1$s').

            }
            #filter (exists {[] ?p []})
            ?s ?p ?v.
            #filter exists {service <%3$s>{
            #        GRAPH ?sol{
            #            ?s ?p_ [].
            #            FILTER(!regex(str(?s),"urn:graph:kws:[0-9]{3}:sol"))
            #        }
            #        FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
            #    }
            #}
        }
    }

    #retorna relação de todas as entidades dentro de S.G
    optional {
        SELECT DISTINCT ?sol ?s
        {
            GRAPH ?sol{
                ?s ?p__ [].
                FILTER(!regex(str(?s),"urn:graph:kws:[0-9]{3}:sol"))
            }
            FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
        }
    }

    bind (COALESCE(?sol,iri(concat("%2$s","sol",str(fn:sequential())))) as ?sol)

};

