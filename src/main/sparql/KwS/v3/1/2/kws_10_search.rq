prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix meta: <http://www.semwebtech.org/mondial/10/meta#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>
prefix fn: <java:uff.ic.swlab.jena.sparql.function.>
PREFIX agg: <http://uff.ic.swlab.jena.sparql.aggregate/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>



#################################################################################################################
# Fazer combinações das entidades encontradas com score > 0 e concatenar os comentários das entidades do grupo. #
#################################################################################################################

with kwsg:groups
insert {
    ?bag a rdf:Bag;
        kws:initialSize ?size;
        rdfs:member ?m1;
        rdfs:member ?m2;
        rdfs:member ?m3;
        rdfs:member ?m4;
        rdfs:member ?m5;
    .
}
using kwsg:seeds
where {
       {
        {
            select ?size ?m1
            where {
                [] rdfs:member ?m1.
                bind(1 as ?size)
            }
        }
        union {
            select ?size ?m1 ?m2
            where {
                [] rdfs:member ?m1.
                [] rdfs:member ?m2.
                filter (str(?m2)>str(?m1))
                bind(2 as ?size)
            }
        }
        union {
            select ?size ?m1 ?m2 ?m3
            where {
                {
                    {
                        [] rdfs:member ?m1.
                        [] rdfs:member ?m2.
                        filter (str(?m2)>str(?m1))
                    }
                    [] rdfs:member ?m3.
                    filter (str(?m3)>str(?m2))
                    bind(3 as ?size)
                }
            }
        }
        union {
            select ?size ?m1 ?m2 ?m3 ?m4
            where {
                {
                    {
                        {
                          [] rdfs:member ?m1.
                          [] rdfs:member ?m2.
                          filter (str(?m2)>str(?m1))
                        }
                        [] rdfs:member ?m3.
                        filter (str(?m3)>str(?m2))
                    }
                    [] rdfs:member ?m4.
                    filter (str(?m4)>str(?m3))
                    bind(4 as ?size)
                }
            }
        }
        union {
            select ?size ?m1 ?m2 ?m3 ?m4 ?m5
            where {
                {
                    {
                        {
                            {
                                [] rdfs:member ?m1.
                                [] rdfs:member ?m2.
                                filter (str(?m2)>str(?m1))
                            }
                            [] rdfs:member ?m3.
                            filter (str(?m3)>str(?m2))
                        }
                        [] rdfs:member ?m4.
                        filter (str(?m4)>str(?m3))
                    }
                    [] rdfs:member ?m5.
                    filter (str(?m5)>str(?m4))
                    bind(5 as ?size)
                }
            }
        }
    }
    bind(iri(concat("%3$s","sol",str(fn:sequential()))) as ?bag)
};

#################################################################################
#Trazendo as triplas das sementes para o grupo de solução
#################################################################################
with kwsg:groups
insert{?s kws:value ?value; kws:matchingPredicate ?predicate; kws:infoRank ?inforank.}
using kwsg:seeds
where {
    [] rdfs:member ?s.
    ?s kws:value ?value.
    ?s kws:matchingPredicate ?predicate.
    ?s kws:infoRank ?inforank.
};

###################################################
# calcular coverageScore  #
###################################################

with kwsg:groups
insert {?bag kws:csScore ?coverageScore.}
using kwsg:groups
where {
  select ?bag (fn:countKwS('%1$s', group_concat(?_value)) as ?coverageScore)
    where {
        ?bag rdfs:member ?m.
        ?m kws:value ?_value.
    }
    group by ?bag
};



#################################################################################
# Calcular o SS score do grupo de cada grupo solução (COMMENT)
#################################################################################

with kwsg:groups
insert {?bag kws:ssScore ?ssScore; kws:maxInitialGroupSize ?maxInitialGroupSize.}
using kwsg:groups
WHERE {
    SELECT ?bag ((?maxInitialGroupSize - ?initialSize)/(?maxInitialGroupSize - 1) AS ?ssScore)
    where {
        {SELECT (max(?initialSize) as ?maxInitialGroupSize) {[] kws:initialSize ?initialSize.}}
        ?bag kws:initialSize ?initialSize.
    }
};





#######################################################################
#Calcular OS (se cada palavra chave é correspondidado por um recurso OS)
#####################################################################

with kwsg:groups
insert {?sol kws:osScore ?osScore}
WHERE {
    SELECT ?sol (agg:kwFreqScore('%1$s', ?value) as ?osScore)
    WHERE {
        graph kwsg:groups {
            ?sol rdfs:member ?s.
            ?s kws:value ?value.
        }
    }
    group by ?sol
};


###############################################################################
#Armazenando infoRank de cada recurso no grupo de solução para calcular a média
###############################################################################

with kwsg:groups
insert  {?bag kws:isScore ?isScore.}
WHERE{
  {
 select ?bag (avg(?infoRank) as ?isScore)
    where {
            graph kwsg:groups{
    			  ?bag rdfs:member ?s.
    			  ?s kws:infoRank ?infoRank.

			}
	}
    group by ?bag
  }
}





