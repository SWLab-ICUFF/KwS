prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix fn: <java:uff.ic.swlab.jena.sparql.function.>
prefix text: <http://jena.apache.org/text#>
prefix quira: <http://www.quira.org/>
PREFIX agg: <http://uff.ic.swlab.jena.sparql.aggregate/>


############################################################################################
# criando uri nomeada da solução e calcular a quantidade de entidades novas em cada solução
#############################################################################################

insert {graph ?sol {?sol kws:size ?size}}
where{
	SELECT ?sol (count(distinct ?entity) as ?size)
WHERE{
  graph ?sol {
    {?entity ?p []} UNION {[] ?p ?entity}
    FILTER(!isBlank(?entity) && !isLiteral(?entity))
  }
   FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
}
group by ?sol
};



############################################################################################
# Armazenando as propriedades das seeds nos grupos de soluções
#############################################################################################
insert {graph ?sol {?s kws:matchingPredicate ?p; kws:value ?o; kws:infoRank ?inforank}}
#using kwsg:seeds
where{
    {
    	graph kwsg:seeds{
        	?s kws:matchingPredicate ?p.
       	 	?s kws:value ?o.
      		?s kws:infoRank ?inforank.
    	}
        graph ?sol {?s ?p2 [].}
        FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
    }
    union
    {
    	graph kwsg:seeds{
        	?s kws:matchingPredicate ?p.
        	?s kws:value ?o.
      		?s kws:infoRank ?inforank.
    	}
        graph ?sol {[] ?p2 ?s.}
        FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
    }
};

############################################################################################
# Armazenando as propriedades das novas entidades
#############################################################################################

insert {graph ?sol {?s  kws:matchingPredicate ?p; kws:value ?literal; kws:infoRank ?inforank}} 
WHERE{
  		service <%1$s> {
    		service <%3$s> {
      			{
					select distinct ?s
 					WHERE{
          				{
               				graph ?sol {?s ?p2 []. filter (not exists {graph kwsg:seeds {?s ?p [].}})}
               				FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
  		 				}union{
                    		graph ?sol {[] ?p2 ?s. filter (not exists {graph kwsg:seeds {?s ?p [].}})}
                    		FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
                		}
  						FILTER(!regex(str(?s),"urn:graph:kws:[0-9]{3}:sol") && isuri(?s))
        			}
				}
    			(?s ?score ?literal) text:query (rdfs:label '%1$s').
       			?s ?p ?literal.
      			?s quira:inforank ?inforank.
			}
		}
  		{
       		graph ?sol {?s ?p2 []. filter (not exists {graph kwsg:seeds {?s ?p [].}})}
       		FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol") && isuri(?s))
    	}union{
       		graph ?sol {[] ?p2 ?s. filter (not exists {graph kwsg:seeds {?s ?p [].}})}
       		FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol") && isuri(?s))
   		}
  		
};

###################################################
# calcular o coverageScore para as novas entidades #
###################################################

insert {graph ?sol {?sol kws:csScore ?coverageScore.}}
WHERE{
select ?sol (fn:countKwS('atacama desert', group_concat(?_value)) as ?coverageScore) 
WHERE{
 graph ?sol{
  		#select (fn:countKwS('%1$s', group_concat(?_value)) as ?coverageScore) 
      		?s kws:value ?_value.
  }
  FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
   
}
group by ?sol
};



######################################################
# Calcular o SS score do grupo de cada grupo solução 
######################################################


insert {graph ?sol {?sol kws:ssScore ?ssScore; kws:maxGroupSize ?maxGroupSize.}}
WHERE {
  SELECT ?sol ?maxGroupSize ((?maxGroupSize - ?size)/(?maxGroupSize - 1) AS ?ssScore)
    where {
        {
            SELECT (max(?size) as ?maxGroupSize)
            WHERE {
  				graph ?sol{ 
                	[] kws:size ?size.
  				}
            }
        }
		graph ?sol{?sol kws:size ?size.}
		
    }
  	
};


#######################################################################
#Calcular OS (se cada palavra chave é correspondidado por um recurso OS)
#####################################################################

insert {graph ?sol {?sol kws:osScore ?osScore}}
WHERE {
    SELECT ?sol (agg:kwFreqScore('atacama desert', ?value) as ?osScore)
    WHERE {
        graph ?sol {
            ?s kws:value ?value.
        }
    FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
    }
    group by ?sol
};

###############################################################################
#Armazenando infoRank de cada recurso no grupo de solução para calcular a média
###############################################################################


insert {graph ?sol {?sol kws:isScore ?isScore.}}
WHERE{
  {
 select ?sol (avg(?infoRank) as ?isScore)
    where {
            graph ?sol{
    			  ?s kws:infoRank ?infoRank.
			}
      		FILTER(regex(str(?sol),"urn:graph:kws:[0-9]{3}:sol"))
	}
    group by ?sol 
  }
}



###########################################################################################################################
# calculando harmonic mean (kws:score) de três modelos:
# 	-Cobertura relativa de kws (coverageScore)
#	-Normalizacão das entidades encontradas pela palavra chave (entityScore)
#	-Frequência  das palavras chaves em relação ao kws:comment (frequencyScore)
#   -Fómrula: (3 * (x1*x2*x3)) / ((x1*x2) + (x1*x3) + (x2*x3))
###########################################################################################################################


insert {graph ?g {?g kws:harmonicScore ?harmonicScore.}}
WHERE{
  	SELECT
  ?g ( (3* (?frequencyScore*?coverageScore*?entityScore)) / ((?frequencyScore*?coverageScore) + (?frequencyScore*?entityScore) + (?coverageScore*?entityScore)) as ?harmonicScore)
	WHERE{
		graph ?g{
    		?g kws:coverageScore ?coverageScore.
    		?g kws:entityScore ?entityScore.
      		?g kws:frequencyScore ?frequencyScore.
    	}
    FILTER(regex(str(?g),"urn:graph:kws:[0-9]{3}:sol"))

	}
};





