prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix meta: <http://www.semwebtech.org/mondial/10/meta#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>
prefix fn: <java:uff.ic.swlab.jena.sparql.function.>


###########################################################################################################################
# calculando harmonic mean (kws:score) de três modelos:
# 	-Cobertura relativa de kws (coverageScore)
#	-Normalizacão das entidades encontradas pela palavra chave (entityScore)
#	-Frequência  das palavras chaves em relação ao kws:comment (frequencyScore)
#   -Fómrula: (3 * (x1*x2*x3)) / ((x1*x2) + (x1*x3) + (x2*x3))
###########################################################################################################################

with kwsg:groups
insert {?bag kws:score ?score.}
WHERE{
  	SELECT
  ?bag ( (3* (?frequencyScore*?coverageScore*?entityScore)) / ((?frequencyScore*?coverageScore) + (?frequencyScore*?entityScore) + (?coverageScore*?entityScore)) as ?score)
	WHERE{
		graph kwsg:groups{
    		?bag a rdf:Bag.
    		?bag kws:coverageScore ?coverageScore.
    		?bag kws:entityScore ?entityScore.
      		?bag kws:frequencyScore ?frequencyScore.
    	}
	}
};

###########################################################################################
# Criando um sub-conjunto de soluções (kwsg:groups2) selecionado as x primeiras respostas#
###########################################################################################

with kwsg:groups2
insert {?bag a rdf:Bag; ?p1 ?o1. ?o1 ?p2 ?o2.}
where {
    {
        select ?bag {
            graph kwsg:groups {?bag a rdf:Bag; kws:coverageScore ?coverageScore. ?bag kws:score ?score.}
            filter (?coverageScore >= 0.8)
        }
        order by desc(?score) limit 15
    }
  graph kwsg:groups {?bag ?p1 ?o1. optional {?o1 ?p2 ?o2.}}
};


##############################################
# Buscar caminhos entre entidades dos grupos #
##############################################


####################################################
# gerar os pares de combinações entre as entidades #
####################################################

with kwsg:pairs
insert {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e2; kws:solution ?bag.}
using kwsg:groups2
where {?bag a rdf:Bag; rdfs:member ?e1; rdfs:member ?e2. filter (str(?e2)>str(?e1))};