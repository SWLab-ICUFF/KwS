prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix meta: <http://www.semwebtech.org/mondial/10/meta#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>
prefix fn: <java:uff.ic.swlab.jena.sparql.function.>

drop all;

###################################
# selecionar entidades relevantes #
###################################

with kwsg:seeds
insert {?bag a rdf:Bag; rdfs:member ?s.}
where {
    {bind(bnode() as ?bag)}
    service <%1$s> {graph kwsg:indexed {?s text:query ('%2$s' 15)}}
};



#################################################################################################################
# Fazer combinações das entidades encontradas com score > 0 e concatenar os comentários das entidades do grupo. #
#################################################################################################################

with kwsg:groups
insert {
  ?bag a rdf:Bag;
    kws:initialSize ?size;
    rdfs:member ?m1;
    rdfs:member ?m2;
    rdfs:member ?m3;
    rdfs:member ?m4;
    rdfs:member ?m5;
    .
}
using kwsg:seeds
where {
    {
        {
            select ?size ?m1
            where {
                [] rdfs:member ?m1.
                bind(1 as ?size)
            }
        }
        union {
            select ?size ?m1 ?m2
            where {
                [] rdfs:member ?m1.
                [] rdfs:member ?m2.
                filter (str(?m2)>str(?m1))
                bind(2 as ?size)
            }
        }
        union {
            select ?size ?m1 ?m2 ?m3
            where {
                {
                    {
                        [] rdfs:member ?m1.
                        [] rdfs:member ?m2.
                        filter (str(?m2)>str(?m1))
                    }
                    [] rdfs:member ?m3.
                    filter (str(?m3)>str(?m2))
                    bind(3 as ?size)
                }
            }
        }
        union {
            select ?size ?m1 ?m2 ?m3 ?m4
            where {
                {
                    {
                        {
                          [] rdfs:member ?m1.
                          [] rdfs:member ?m2.
                          filter (str(?m2)>str(?m1))
                        }
                        [] rdfs:member ?m3.
                        filter (str(?m3)>str(?m2))
                    }
                    [] rdfs:member ?m4.
                    filter (str(?m4)>str(?m3))
                    bind(4 as ?size)
                }
            }
        }
        union {
            select ?size ?m1 ?m2 ?m3 ?m4 ?m5
            where {
                {
                    {
                        {
                            {
                                [] rdfs:member ?m1.
                                [] rdfs:member ?m2.
                                filter (str(?m2)>str(?m1))
                            }
                            [] rdfs:member ?m3.
                            filter (str(?m3)>str(?m2))
                        }
                        [] rdfs:member ?m4.
                        filter (str(?m4)>str(?m3))
                    }
                    [] rdfs:member ?m5.
                    filter (str(?m5)>str(?m4))
                    bind(5 as ?size)
                }
            }
        }
    }
    bind(iri(concat("%3$s","sol",str(fn:sequential()))) as ?bag)
};



################################################
# levar kws:comment do Mondial para o Kws.temp #
################################################
using kwsg:groups
insert {?s meta:__search_id ?id; kws:comment ?comment.}
where {
    {
#       {select distinct ?s {graph ?g {{?s ?p []} union {[] ?p ?s} filter(!isBlank(?s))}}}
        {graph kwsg:seeds {[] rdfs:member ?s}} # verificar
        optional {service <%1$s> {?s meta:__search_id ?id}}
        optional {service <%1$s> {graph kwsg:indexed {?s kws:comment ?comment}}}
    }
#   {select distinct ?g ?s {graph ?g {{?s ?p []} union {[] ?p ?s} filter(!isBlank(?s))}}}
};



###################################################
# concatenar kws:comment das entidades dos grupos #
###################################################

with kwsg:groups
# insert {?bag kws:comment ?comment; kws:size ?size.}
insert {?bag kws:comment ?comment.}
where {
#   select ?bag (group_concat(coalesce(?_comment,"")) as ?comment) (count(?m) as ?size)
    select ?bag (group_concat(coalesce(?_comment,"")) as ?comment)
    where {
        graph kwsg:groups {
            ?bag a rdf:Bag; rdfs:member ?m.
            optional {?m kws:comment ?_comment}
        }
    }
    group by ?bag
};




