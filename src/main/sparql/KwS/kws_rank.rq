prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>
prefix fn: <java:uff.ic.swlab.jena.sparql.function.>


#####################################################
# selecionar os grupos de entidades mais relevantes #
#####################################################

with kwsg:solutions
insert {
  ?g a rdf:Bag;
    kws:score ?score;
    kws:size ?size;
    rdfs:member ?m;
    .
  ?m kws:comment ?comment.
}
using kwsg:temp3
using named kwsg:temp
where {
  {
    select ?bag (coalesce(?_score,0) as ?score) ?size ?g
    where {
        ?bag a rdf:Bag.
        ?bag kws:size ?size.
        optional {(?bag ?_score) text:query '%1$s'}
        bind(iri(concat("urn:graph:kws:043:sol",str(fn:sequential()))) as ?g)
    }
    order by desc(coalesce(?_score,0)) ?size
    limit 50
  }
  ?bag rdfs:member ?m.
};



##############################################
# Buscar caminhos entre entidades dos grupos #
##############################################
# bind(iri(concat("<urn:graph:kws:043:",str(fn:sequential()),">")) as ?g)

with kwsg:temp4
insert {[] a rdf:Bag; rdf:_1 ?e1; rdf:_2 ?e2.}
using kwsg:solutions
where {
select distinct ?e1 ?e2
    where {
      [] a rdf:Bag; rdfs:member ?e1; rdfs:member ?e2.
      filter (str(?e2)>str(?e1))
    }
};


# distancia 1
insert {graph ?g {?e1 ?p1 ?e2.}}
where {
    graph kwsg:temp4 {
        [] a rdf:Bag; rdf:_1 ?e1; rdf:_2 ?e2.
        filter (not exists {graph kwsg:sol1 {?e1 (!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size) | ^(!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size)))+ ?e2}})
  }
  graph kwsg:temp {?e1 ?p1 ?e2. filter(?p1 not in (rdf:type,rdfs:member))}
  graph kwsg:solutions {?g a rdf:Bag; rdfs:member ?e1; rdfs:member ?e2.}
};

insert {graph ?g {?e2 ?_p1 ?e1.}}
where {
    graph kwsg:temp4 {
        [] a rdf:Bag; rdf:_1 ?e1; rdf:_2 ?e2.
    filter (not exists {graph kwsg:sol1 {?e1 (!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size) | ^(!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size)))+ ?e2}})
  }
  graph kwsg:temp {?e2 ?_p1 ?e1. filter(?_p1 not in (rdf:type,rdfs:member))}
  graph kwsg:solutions {?g a rdf:Bag; rdfs:member ?e1; rdfs:member ?e2.}
};


# distancia 2
insert {graph ?g {?e1 ?p1 ?e2. ?e2 ?p2 ?e3.}}
where {
    graph kwsg:temp4 {
        [] a rdf:Bag; rdf:_1 ?e1; rdf:_2 ?e3.
    filter (not exists {graph kwsg:sol1 {?e1 (!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size) | ^(!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size)))+ ?e3}})
  }
  graph kwsg:temp {
    ?e1 ?p1 ?e2. filter(isIRI(?e2) && ?e2 not in (?e1) && ?p1 not in (rdf:type,rdfs:member))
    ?e2 ?p2 ?e3. filter(?p2 not in (rdf:type,rdfs:member))
  }
  graph kwsg:solutions {?g a rdf:Bag; rdfs:member ?e1; rdfs:member ?e3.}
};


insert {graph ?g {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3.}}
where {
    graph kwsg:temp4 {
        [] a rdf:Bag; rdf:_1 ?e1; rdf:_2 ?e3.
    filter (not exists {graph kwsg:sol1 {?e1 (!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size) | ^(!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size)))+ ?e3}})
  }
  graph kwsg:temp {
    ?e2 ?_p1 ?e1. filter(isIRI(?e2) && ?e2 not in (?e1) && ?_p1 not in (rdf:type,rdfs:member))
    ?e2 ?p2 ?e3. filter(?p2 not in (rdf:type,rdfs:member))
  }
  graph kwsg:solutions {?g a rdf:Bag; rdfs:member ?e1; rdfs:member ?e3.}
};

insert {graph ?g {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2.}}
where {
    graph kwsg:temp4 {
        [] a rdf:Bag; rdf:_1 ?e1; rdf:_2 ?e3.
    filter (not exists {graph kwsg:sol1 {?e1 (!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size) | ^(!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size)))+ ?e3}})
  }
  graph kwsg:temp {
    ?e1 ?p1 ?e2. filter(isIRI(?e2) && ?e1 not in (?e1) && ?p1 not in (rdf:type,rdfs:member))
    ?e3 ?_p2 ?e2. filter(?_p2 not in (rdf:type,rdfs:member))
  }
  graph kwsg:solutions {?g a rdf:Bag; rdfs:member ?e1; rdfs:member ?e3.}
};


insert {graph ?g {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2.}}
where {
    graph kwsg:temp4 {
        [] a rdf:Bag; rdf:_1 ?e1; rdf:_2 ?e3.
    filter (not exists {graph kwsg:sol1 {?e1 (!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size) | ^(!(rdf:type | rdfs:member | kws:comment | kws:score | kws:size)))+ ?e3}})
  }
  graph kwsg:temp {
    ?e2 ?_p1 ?e1. filter(isIRI(?e2) && ?e2 not in (?e1) && ?_p1 not in (rdf:type,rdfs:member))
    ?e3 ?_p2 ?e2. filter(?_p2 not in (rdf:type,rdfs:member))
  }
  graph kwsg:solutions {?g a rdf:Bag; rdfs:member ?e1; rdfs:member ?e3.}
};




#with kwsg:sol1
#insert {
#  ?s kws:comment ?comment.
#}
#using kwsg:sol1
#using named kwsg:temp
#where {
#  ?s ?p [].
#  graph kwsg:temp {?s kws:comment ?comment.}
#};