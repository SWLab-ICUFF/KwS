PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix meta: <http://www.semwebtech.org/mondial/10/meta#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>
prefix fn: <java:uff.ic.swlab.jena.sparql.function.>


###########################################################################################################################
# calculando harmonic mean (kws:score) dos dois modelos: 
# 	-Cobertura relativa de kws (Precisão)
#	-Normalizacão das entidades encontradas pela palavra chave (Recall) 
#   -Fómrula: 2  . [(precision . recall) / (precision + recall)]
###########################################################################################################################

with kwsg:groups
insert {?bag kws:covarageScore ?score.}
WHERE{
  	SELECT  
	?bag (xsd:float(2) * ((xsd:float(?coberturakws) * xsd:float(?sizeScore)) / (xsd:float(?coberturakws) + xsd:float(?sizeScore)))  as ?score)
	WHERE{
		graph kwsg:groups{
    		?bag a rdf:Bag.
    		?bag kws:countkws ?coberturakws.
    		?bag kws:sizeScore ?sizeScore.
    	}
	}
};

###########################################################################################
# Criando um sub-conjunto de soluções (kwsg:groups2) selecionado as 20 primeiras respostas#
###########################################################################################

with kwsg:groups2
insert {?bag a rdf:Bag; ?p1 ?o1. ?o1 ?p2 ?o2.}
where {
  {select ?bag {graph kwsg:groups {?bag a rdf:Bag; kws:covarageScore ?score.}} order by desc(?score) limit 20}
    graph kwsg:groups {?bag ?p1 ?o1. optional {?o1 ?p2 ?o2.}}
};


##############################################
# Buscar caminhos entre entidades dos grupos #
##############################################


####################################################
# gerar os pares de combinações entre as entidades #
####################################################

with kwsg:pairs
insert {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e2; kws:solution ?bag.}
using kwsg:groups2
where {?bag a rdf:Bag; rdfs:member ?e1; rdfs:member ?e2. filter (str(?e2)>str(?e1))};

##########################################
# calculando os caminhos com distância 0 
##########################################

insert {
    graph ?sol {?e1 a ?T.}
}
where {
    graph kwsg:groups2 { 
        ?sol a rdf:Bag; rdfs:member ?e1.
        filter(not exists {?sol rdfs:member ?e2. filter(?e2 != ?e1)})
    }
    service <http://localhost:3030/Mondial/sparql> {?e1 a ?T.}
};

#####################################################################
# calculando os caminhos com distância 1 
#####################################################################

insert {
  graph ?sol {?e1 ?p1 ?e2.}
  graph ?sol {?e2 ?_p1 ?e1.}
}
where{
	{
    	{	
      		#relação de duas colunas contendo os membros das soluções com exatamente dois membros. 
      		{select distinct ?e1 ?e2 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e2.}}}
      		#relação com todos os predicados entre ?e1 e ?e2
      		service <http://localhost:3030/Mondial/sparql> {
        		?e1 ?p1 ?e2.
      		}
      		#union.....
    	}union {
      		#relação com todos os predicados entre ?e2 e ?e1
      		{select distinct ?e1 ?e2 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e2.}}}
      		service <http://localhost:3030/Mondial/sparql> {
        		 ?e2 ?_p1 ?e1. 
      		}
    	}
    }#resultado da relação com UNION...
  	#pegando os PARES de soluções correspondentes entre ?e1 e ?e2
  	{graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e2; kws:solution ?sol.}}
};
#####################################################################
# calculando os caminhos com distância 2 
#####################################################################
  
insert {
  graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3.}
  graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2.}
  graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3.}
  graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2.}
  graph kwsg:groups {?sol rdfs:member ?e2}
}
where {
  {
    {
    	{select distinct ?e1 ?e3 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3.}}}
      	service <http://localhost:3030/Mondial/sparql>  {
              ?e1 ?p1 ?e2. filter(?e2 not in (?e1))
              ?e2 ?p2 ?e3. filter(?e3 not in (?e1,?e2))
          }
    }
    union{
    	{select distinct ?e1 ?e3 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3.}}}
      	service <http://localhost:3030/Mondial/sparql>  {
              ?e1 ?p1 ?e2. filter(isIRI(?e2) && ?e2 not in (?e1))
              ?e3 ?_p2 ?e2. filter(?e3 not in (?e1,?e2))
         }
    }
    union {
          {select distinct ?e1 ?e3 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3.}}}
          service <http://localhost:3030/Mondial/sparql>  {
              ?e2 ?_p1 ?e1. filter(?e2 not in (?e1))
              ?e2 ?p2 ?e3. filter(?e3 not in (?e1,?e2))
          }
        }
        union {
          {select distinct ?e1 ?e3 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3.}}}
          service <http://localhost:3030/Mondial/sparql>  {
              ?e2 ?_p1 ?e1. filter(?e2 not in (?e1))
              ?e3 ?_p2 ?e2. filter(?e3 not in (?e1,?e2))
          }
        }
  }
  {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3; kws:solution ?sol.}}
};


#####################################################################
# calculando os caminhos com distância 3 
#####################################################################
insert {
    graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4.}
    graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e4 ?_p3 ?e3.}
    graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2. ?e3 ?p3 ?e4.}
    graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2. ?e4 ?_p3 ?e3.}
    graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4.}
    graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3. ?e4 ?_p3 ?e3.}
    graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2. ?e3 ?p3 ?e4.}
    graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2. ?e4 ?_p3 ?e3.}
    graph kwsg:groups {?sol rdfs:member ?e2.}
    graph kwsg:groups {?sol rdfs:member ?e3.}
}
where {
    #graph kwsg:pairs {?seq a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4; kws:solution ?sol.}
    {
        {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(?e2 not in (?e1))
                ?e2 ?p2 ?e3. filter(?e3 not in (?e1,?e2))
                ?e3 ?p3 ?e4. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(?e2 not in (?e1))
                ?e2 ?p2 ?e3. filter(isIRI(?e3) && ?e3 not in (?e1,?e2))
                ?e4 ?_p3 ?e3. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(isIRI(?e2) && ?e2 not in (?e1))
                ?e3 ?_p2 ?e2. filter(?e3 not in (?e1,?e2))
                ?e3 ?p3 ?e4. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter (isIRI(?e2) && ?e2 not in (?e1))
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2))
                ?e4 ?_p3 ?e3. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1))
                ?e2 ?p2 ?e3. filter (?e3 not in (?e1,?e2))
                ?e3 ?p3 ?e4. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1))
                ?e2 ?p2 ?e3. filter (isIRI(?e3) && ?e3 not in (?e1,?e2))
                ?e4 ?_p3 ?e3. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1))
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2))
                ?e3 ?p3 ?e4. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1))
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2))
                ?e4 ?_p3 ?e3. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
    }
  {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4; kws:solution ?sol.}}
};

#####################################################################
# calculando os caminhos com distância 4
#####################################################################

# distancia 4
insert {
    graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4. ?e4 ?p4 ?e5.}
    graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4. ?e5 ?_p4 ?e4.}
    graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e4 ?_p3 ?e3. ?e4 ?p4 ?e5.}
    graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e4 ?_p3 ?e3. ?e5 ?_p4 ?e4.}
    graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2. ?e3 ?p3 ?e4. ?e4 ?p4 ?e5.}
    graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2. ?e3 ?p3 ?e4. ?e5 ?_p4 ?e4.}
    graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2. ?e4 ?_p3 ?e3. ?e4 ?p4 ?e5.}
    graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2. ?e4 ?_p3 ?e3. ?e5 ?_p4 ?e4.}
    graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4. ?e4 ?p4 ?e5.}
    graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4. ?e5 ?_p4 ?e4.}
    graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3. ?e4 ?_p3 ?e3. ?e4 ?p4 ?e5.}
    graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3. ?e4 ?_p3 ?e3. ?e5 ?_p4 ?e4.}
    graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2. ?e3 ?p3 ?e4. ?e4 ?p4 ?e5.}
    graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2. ?e3 ?p3 ?e4. ?e5 ?_p4 ?e4.}
    graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2. ?e4 ?_p3 ?e3. ?e4 ?p4 ?e5.}
    graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2. ?e4 ?_p3 ?e3. ?e5 ?_p4 ?e4.}
    graph kwsg:groups {?sol rdfs:member ?e2.}
    graph kwsg:groups {?sol rdfs:member ?e3.}
    graph kwsg:groups {?sol rdfs:member ?e4.}
}
where {
    #graph kwsg:pairs {?seq a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5; kws:solution ?sol.}
    {
        {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(?e2 not in (?e1)) #1
                ?e2 ?p2 ?e3. filter(?e3 not in (?e1,?e2)) #2
                ?e3 ?p3 ?e4. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e4 ?p4 ?e5. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(?e2 not in (?e1)) #1
                ?e2 ?p2 ?e3. filter(?e3 not in (?e1,?e2)) #2
                ?e3 ?p3 ?e4. filter(isIRI(?e4) && ?e4 not in (?e1,?e2,?e3)) #3
                ?e5 ?_p4 ?e4. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(?e2 not in (?e1)) #1
                ?e2 ?p2 ?e3. filter(isIRI(?e3) && ?e3 not in (?e1,?e2)) #2
                ?e4 ?_p3 ?e3. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e4 ?p4 ?e5. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(?e2 not in (?e1)) #1
                ?e2 ?p2 ?e3. filter(isIRI(?e3) && ?e3 not in (?e1,?e2)) #2
                ?e4 ?_p3 ?e3. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e5 ?_p4 ?e4. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(isIRI(?e2) && ?e2 not in (?e1)) #1
                ?e3 ?_p2 ?e2. filter(?e3 not in (?e1,?e2)) #2
                ?e3 ?p3 ?e4. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e4 ?p4 ?e5. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(isIRI(?e2) && ?e2 not in (?e1)) #1
                ?e3 ?_p2 ?e2. filter(?e3 not in (?e1,?e2)) #2
                ?e3 ?p3 ?e4. filter(isIRI(?e4) && ?e4 not in (?e1,?e2,?e3)) #3
                ?e5 ?_p4 ?e4. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter (isIRI(?e2) && ?e2 not in (?e1)) #1
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2)) #2
                ?e4 ?_p3 ?e3. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e4 ?p4 ?e5. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter (isIRI(?e2) && ?e2 not in (?e1)) #1
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2)) #2
                ?e4 ?_p3 ?e3. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e5 ?_p4 ?e4. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1)) #1
                ?e2 ?p2 ?e3. filter (?e3 not in (?e1,?e2)) #2
                ?e3 ?p3 ?e4. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e4 ?p4 ?e5. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1)) #1
                ?e2 ?p2 ?e3. filter (?e3 not in (?e1,?e2)) #2
                ?e3 ?p3 ?e4. filter(isIRI(?e4) && ?e4 not in (?e1,?e2,?e3)) #3
                ?e5 ?_p4 ?e4. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1)) #1
                ?e2 ?p2 ?e3. filter (isIRI(?e3) && ?e3 not in (?e1,?e2)) #2
                ?e4 ?_p3 ?e3. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e4 ?p4 ?e5. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1)) #1
                ?e2 ?p2 ?e3. filter (isIRI(?e3) && ?e3 not in (?e1,?e2)) #2
                ?e4 ?_p3 ?e3. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e5 ?_p4 ?e4. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql> {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1)) #1
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2)) #2
                ?e3 ?p3 ?e4. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e4 ?p4 ?e5. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1)) #1
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2)) #2
                ?e3 ?p3 ?e4. filter(isIRI(?e4) && ?e4 not in (?e1,?e2,?e3)) #3
                ?e5 ?_p4 ?e4. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1)) #1
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2)) #2
                ?e4 ?_p3 ?e3. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e4 ?p4 ?e5. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
        union {
      		{select distinct ?e1 ?e5 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1)) #1
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2)) #2
                ?e4 ?_p3 ?e3. filter(?e4 not in (?e1,?e2,?e3)) #3
                ?e5 ?_p4 ?e4. filter(?e4 not in (?e1,?e2,?e3,?e4)) #4
            }
        }
    }
  	{graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e5; kws:solution ?sol.}}
};

drop graph kwsg:pairs;