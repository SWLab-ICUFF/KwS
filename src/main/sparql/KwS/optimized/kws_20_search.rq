prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix meta: <http://www.semwebtech.org/mondial/10/meta#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>
prefix fn: <java:uff.ic.swlab.jena.sparql.function.>


###################
# calcular scores #
###################

insert {graph ?g {?s kws:score ?score}}
where {
    graph ?g {
        ?s kws:comment [].
        (?s ?score) text:query 'mauritius india'.
    }
};

###########################################################################################
# Criando um sub-conjunto de soluções (kwsg:groups2) selecionado as 20 primeiras respostas#
###########################################################################################

with kwsg:groups2
insert {?bag a rdf:Bag; ?p1 ?o1. ?o1 ?p2 ?o2.}
where {
  {select ?bag {graph kwsg:groups {?bag a rdf:Bag; kws:score ?score.}} order by desc(?score) limit 20}
    graph kwsg:groups {?bag ?p1 ?o1. optional {?o1 ?p2 ?o2.}}
};

##############################################
# Buscar caminhos entre entidades dos grupos #
##############################################


####################################################
# gerar os pares de combinações entre as entidades #
####################################################

with kwsg:pairs
insert {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e2; kws:solution ?bag.}
using kwsg:groups2
where {?bag a rdf:Bag; rdfs:member ?e1; rdfs:member ?e2. filter (str(?e2)>str(?e1))};

##########################################
# calculando os caminhos com distância 0 (soluções somente com membro na bag)
##########################################

insert {
    graph ?sol {?e1 a ?T.}
}
where {
    graph kwsg:groups2 { 
        ?sol a rdf:Bag; rdfs:member ?e1.
        filter(not exists {?sol rdfs:member ?e2. filter(?e2 != ?e1)})
    }
    service <http://localhost:3030/Mondial/sparql> {?e1 a ?T.}
};

#####################################################################
# calculando os caminhos com distância 1 (soluções com dois membros)
#####################################################################

insert {
  graph ?sol {?e1 ?p1 ?e2.}
  graph ?sol {?e2 ?_p1 ?e1.}
}
where{
	{
    	{	
      		#relação de duas colunas contendo os membros das soluções com exatamente dois membros. 
      		{select distinct ?e1 ?e2 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e2.}}}
      		#relação com todos os predicados entre ?e1 e ?e2
      		service <http://localhost:3030/Mondial/sparql> {
        		?e1 ?p1 ?e2.
      		}
      		#union.....
    	}union {
      		#relação com todos os predicados entre ?e2 e ?e1
      		{select distinct ?e1 ?e2 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e2.}}}
      		service <http://localhost:3030/Mondial/sparql> {
        		 ?e2 ?_p1 ?e1. 
      		}
    	}
    }#resultado da relação com UNION...
  	#pegando os PARES de soluções correspondentes entre ?e1 e ?e2
  	{graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e2; kws:solution ?sol.}}
};
#####################################################################
# calculando os caminhos com distância 2 (soluções com três membros)
#####################################################################
  
insert {
  graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3.}
  graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2.}
  graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3.}
  graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2.}
  graph kwsg:groups {?sol rdfs:member ?e2}
}
where {
  {
    {
    	{select distinct ?e1 ?e3 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3.}}}
      	service <http://localhost:3030/Mondial/sparql>  {
              ?e1 ?p1 ?e2. filter(?e2 not in (?e1))
              ?e2 ?p2 ?e3. filter(?e3 not in (?e1,?e2))
          }
    }
    union{
    	{select distinct ?e1 ?e3 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3.}}}
      	service <http://localhost:3030/Mondial/sparql>  {
              ?e1 ?p1 ?e2. filter(isIRI(?e2) && ?e2 not in (?e1))
              ?e3 ?_p2 ?e2. filter(?e3 not in (?e1,?e2))
         }
    }
    union {
          {select distinct ?e1 ?e3 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3.}}}
          service <http://localhost:3030/Mondial/sparql>  {
              ?e2 ?_p1 ?e1. filter(?e2 not in (?e1))
              ?e2 ?p2 ?e3. filter(?e3 not in (?e1,?e2))
          }
        }
        union {
          {select distinct ?e1 ?e3 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3.}}}
          service <http://localhost:3030/Mondial/sparql>  {
              ?e2 ?_p1 ?e1. filter(?e2 not in (?e1))
              ?e3 ?_p2 ?e2. filter(?e3 not in (?e1,?e2))
          }
        }
  }
  {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e3; kws:solution ?sol.}}
};


# distancia 3
insert {
    graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4.}
    graph ?sol {?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e4 ?_p3 ?e3.}
    graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2. ?e3 ?p3 ?e4.}
    graph ?sol {?e1 ?p1 ?e2. ?e3 ?_p2 ?e2. ?e4 ?_p3 ?e3.}
    graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4.}
    graph ?sol {?e2 ?_p1 ?e1. ?e2 ?p2 ?e3. ?e4 ?_p3 ?e3.}
    graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2. ?e3 ?p3 ?e4.}
    graph ?sol {?e2 ?_p1 ?e1. ?e3 ?_p2 ?e2. ?e4 ?_p3 ?e3.}
    graph kwsg:groups {?sol rdfs:member ?e2.}
    graph kwsg:groups {?sol rdfs:member ?e3.}
}
where {
    #graph kwsg:pairs {?seq a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4; kws:solution ?sol.}
    {
        {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(?e2 not in (?e1))
                ?e2 ?p2 ?e3. filter(?e3 not in (?e1,?e2))
                ?e3 ?p3 ?e4. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(?e2 not in (?e1))
                ?e2 ?p2 ?e3. filter(isIRI(?e3) && ?e3 not in (?e1,?e2))
                ?e4 ?_p3 ?e3. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter(isIRI(?e2) && ?e2 not in (?e1))
                ?e3 ?_p2 ?e2. filter(?e3 not in (?e1,?e2))
                ?e3 ?p3 ?e4. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e1 ?p1 ?e2. filter (isIRI(?e2) && ?e2 not in (?e1))
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2))
                ?e4 ?_p3 ?e3. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1))
                ?e2 ?p2 ?e3. filter (?e3 not in (?e1,?e2))
                ?e3 ?p3 ?e4. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1))
                ?e2 ?p2 ?e3. filter (isIRI(?e3) && ?e3 not in (?e1,?e2))
                ?e4 ?_p3 ?e3. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1))
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2))
                ?e3 ?p3 ?e4. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
        union {
      		{select distinct ?e1 ?e4 {graph kwsg:pairs {[] a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4.}}}
            service <http://localhost:3030/Mondial/sparql>  {
                ?e2 ?_p1 ?e1. filter (?e2 not in (?e1))
                ?e3 ?_p2 ?e2. filter (?e3 not in (?e1,?e2))
                ?e4 ?_p3 ?e3. filter (?e4 not in (?e1,?e2,?e3))
            }
        }
    }
  {graph kwsg:pairs {?seq a rdf:Seq; rdf:_1 ?e1; rdf:_2 ?e4; kws:solution ?sol.}}
};
