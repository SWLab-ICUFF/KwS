prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>

###################################
# selecionar entidades relevantes #
###################################

drop graph kwsg:seeds;
insert {graph kwsg:seeds {?bag a rdf:Bag; rdfs:member ?s.}}
where {
  {bind(bnode() as ?bag)}
  service <http://localhost:3030/Mondial/sparql>
  {graph kwsg:indexed {?s text:query ('(rio de janeiro Brazil)' 8).}}
};

###################################################
# identificar ligacoes entre entidades relevantes #
###################################################

drop graph kwsg:temp;
insert {
  graph kwsg:temp{
    [] a rdf:Seq;
      rdf:_1 ?a;
      rdf:_2 ?p1;
      rdf:_2 ?_p1;
      rdf:_3 ?s1;
      rdf:_4 ?p2;
      rdf:_4 ?_p2;
      rdf:_5 ?s2;
      rdf:_6 ?p3;
      rdf:_6 ?_p3;
      rdf:_7 ?b.

    ?a ?p0 ?b.
    ?b ?_p0 ?a.

    ?a ?p1 ?s1. ?s1 ?p3 ?b.
    ?a ?p1 ?s1. ?b ?_p3 ?s1.
    ?s1 ?_p1 ?a. ?s1 ?p3 ?b.
    ?s1 ?_p1 ?a. ?b ?_p3 ?s1.

    ?a ?p1 ?s1. ?s1 ?p2 ?s2. ?s2 ?p3 ?b.
    ?a ?p1 ?s1. ?s1 ?p2 ?s2. ?b ?_p3 ?s2.
    ?a ?p1 ?s1. ?s2 ?_p2 ?s1. ?s2 ?p3 ?b.
    ?a ?p1 ?s1. ?s2 ?_p2 ?s1. ?b ?_p3 ?s2.
    ?s1 ?_p1 ?a. ?s1 ?p2 ?s2. ?s2 ?p3 ?b.
    ?s1 ?_p1 ?a. ?s1 ?p2 ?s2. ?b ?_p3 ?s2.
    ?s1 ?_p1 ?a. ?s2 ?_p2 ?s1. ?s2 ?p3 ?b.
    ?s1 ?_p1 ?a. ?s2 ?_p2 ?s1. ?b ?_p3 ?s2.
  }
}
where {
  { # busca caminhos de distância 1
    {
      {graph kwsg:seeds {[] rdfs:member ?a.}}
      {graph kwsg:seeds {[] rdfs:member ?b.}}
      filter (str(?b) > str(?a))
    }
    service <http://localhost:3030/Mondial/sparql> {
      select distinct *
      where {
        {?a ?p0 ?b. filter (?p0 != rdf:type)}
      	union {?b ?_p0 ?a. filter (?_p0 != rdf:type)}
      }
    }
  }

  union {  # busca caminhos de distância 2
    {
      {graph kwsg:seeds {[] rdfs:member ?a.}}
      {graph kwsg:seeds {[] rdfs:member ?b.}}
      filter (str(?b) > str(?a))
    }
    service <http://localhost:3030/Mondial/sparql> {
      select distinct *
      where {
        {?a ?p1 ?s1. ?s1 ?p3 ?b. filter ((?p1 != rdf:type) && (?p3 != rdf:type))}
      	union {?a ?p1 ?s1. ?b ?_p3 ?s1. ?s1 ?p []. filter ((?p1 != rdf:type) && (?_p3 != rdf:type))}
      	union {?s1 ?_p1 ?a. ?s1 ?p3 ?b. filter ((?_p1 != rdf:type) && (?_p3 != rdf:type))}
      	union {?s1 ?_p1 ?a. ?b ?_p3 ?s1. filter ((?_p1 != rdf:type) && (?_p3 != rdf:type))}
      }
    }
  }
  union {  # busca caminhos de distância 3
    {
      {graph kwsg:seeds {[] rdfs:member ?a.}}
      {graph kwsg:seeds {[] rdfs:member ?b.}}
      filter (str(?b) > str(?a))
    }
    service <http://localhost:3030/Mondial/sparql>{
        select distinct *
        where {
            {?a ?p1 ?s1. ?s2 ?p3 ?b. ?s1 ?p2 ?s2. filter ((?p1 != rdf:type) && (?p2 != rdf:type) && (?p3 != rdf:type))}
            union {?a ?p1 ?s1. ?b ?_p3 ?s2. ?s2 ?p []. ?s1 ?p2 ?s2. filter ((?p1 != rdf:type) && (?p2 != rdf:type) && (?_p3 != rdf:type))}
            union {?a ?p1 ?s1. ?s1 ?p []. ?s2 ?p3 ?b. ?s2 ?_p2 ?s1. filter ((?p1 != rdf:type) && (?_p2 != rdf:type) && (?p3 != rdf:type))}
            union {?a ?p1 ?s1. ?s1 ?p []. ?b ?_p3 ?s2. ?s2 ?_p2 ?s1. filter ((?p1 != rdf:type) && (?_p2 != rdf:type) && (?_p3 != rdf:type))}
            union {?s1 ?_p1 ?a. ?s2 ?p3 ?b. ?s1 ?p2 ?s2. filter ((?_p1 != rdf:type) && (?p2 != rdf:type) && (?p3 != rdf:type))}
            union {?s1 ?_p1 ?a. ?b ?_p3 ?s2. ?s2 ?p []. ?s1 ?p2 ?s2. filter ((?_p1 != rdf:type) && (?p2 != rdf:type) && (?_p3 != rdf:type))}
            union {?s1 ?_p1 ?a. ?s2 ?p3 ?b. ?s2 ?_p2 ?s1. filter ((?_p1 != rdf:type) && (?_p2 != rdf:type) && (?p3 != rdf:type))}
            union {?s1 ?_p1 ?a. ?b ?_p3 ?s2. ?s2 ?_p2 ?s1. filter ((?_p1 != rdf:type) && (?_p2 != rdf:type) && (?_p3 != rdf:type))}
        }
    }
  }
};

#################################################
# calcular scores das entidades selecionadas.   #
#################################################

insert {graph kwsg:temp {?e kws:score ?score; rdfs:label ?label; kws:comment ?comment.}}
where {
  {select distinct ?e where {graph kwsg:temp {[] rdfs:member ?e.}}}
  optional {
    service <http://localhost:3030/Mondial/sparql> {
    graph kwsg:indexed {(?e ?score) text:query ('%1$s').}
    }
  }
  optional {
    service <http://localhost:3030/Mondial/sparql> {
      {?e rdfs:label ?label.}
    }
  }
  optional {
    service <http://localhost:3030/Mondial/sparql> {
      graph kwsg:indexed {?e kws:comment ?comment.}
    }
  }
};

#################################################
# identificar componentes conexos das respostas #
#################################################

# iteracao 1
insert {
  graph kwsg:temp {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
}
where {
  {
    select ?s (bnode() as ?bag)
    where {
      graph kwsg:temp {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
      }
    }
    limit 1
  }
  {
    graph kwsg:temp {
      ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
      filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
    }
  }
};

# iteracao 2
insert {
  graph kwsg:temp {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
}
where {
  {
    select ?s (bnode() as ?bag)
    where {
      graph kwsg:temp {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
      }
    }
    limit 1
  }
  {
    graph kwsg:temp {
      ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
      filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
    }
  }
};

# iteracao 3
insert {
  graph kwsg:temp {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
}
where {
  {
    select ?s (bnode() as ?bag)
    where {
      graph kwsg:temp {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
      }
    }
    limit 1
  }
  {
    graph kwsg:temp {
      ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
      filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
    }
  }
};

# iteracao 4
insert {
  graph kwsg:temp {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
}
where {
  {
    select ?s (bnode() as ?bag)
    where {
      graph kwsg:temp {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
      }
    }
    limit 1
  }
  {
    graph kwsg:temp {
      ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
      filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
    }
  }
};

# iteracao 5
insert {
  graph kwsg:temp {?bag a rdf:Bag; rdfs:member ?s; rdfs:member ?member.}
}
where {
  {
    select ?s (bnode() as ?bag)
    where {
      graph kwsg:temp {
        ?s ?p ?o
      	filter (not exists {[a rdf:Bag; rdfs:member ?s]} && not exists {?s a rdf:Seq} && not exists {?s a rdf:Bag})
      }
    }
    limit 1
  }
  {
    graph kwsg:temp {
      ?s (!(rdf:type | rdfs:member) | ^(!(rdf:type | rdfs:member)))+ ?member.
      filter (!isLiteral(?member) && not exists {?member a rdf:Bag} && not exists {?member a rdf:Seq})
    }
  }
};

########################
# selecionar resultado #
########################

drop default;
insert {?c a rdf:Seq; kws:score ?score; ?p1 ?m. ?m ?p2 ?o.}
where {
  {
    select ?c (sum(coalesce(?sc,0)) as ?score)
    where {
      graph kwsg:temp {
        ?c a rdf:Seq; rdfs:member ?m.
        optional {?m kws:score ?sc}.
      }
    }
    group By ?c
    limit 10
  }
  {
    graph kwsg:temp {
      {?c a rdf:Seq; rdfs:member ?m. ?c ?p1 ?m.}
      optional {?m ?p2 ?o.}
    }
  }
};