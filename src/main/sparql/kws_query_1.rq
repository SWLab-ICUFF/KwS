prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>

drop all;

###################################
# selecionar entidades relevantes #
###################################

insert {graph kwsg:seeds {?bag a rdf:Bag; rdfs:member ?s.}}
where {
  {bind(bnode() as ?bag)}
  service <http://localhost:3030/Mondial/sparql>
  {graph kwsg:indexed {?s text:query ('%1$s' 8).}}
};

###################################################
# identificar ligacoes entre entidades relevantes #
###################################################

insert {
  graph kwsg:temp{
    ?seq a rdf:Seq;
        rdf:_1 ?e1; rdf:_2 ?p1; rdf:_2 ?__p1;
        rdf:_3 ?e2; rdf:_4 ?p2; rdf:_4 ?__p2;
        rdf:_5 ?e3; rdf:_6 ?p3; rdf:_6 ?__p3;
        rdf:_7 ?e4.
    ?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4.
    ?e4 ?_p3 ?e3. ?e3 ?_p2 ?e2. ?e2 ?_p1 ?e1.
  }
}
where {
  { # busca caminhos de distância 1
    {
      {graph kwsg:seeds {[] rdfs:member ?a.}}
      {graph kwsg:seeds {[] rdfs:member ?b.}}
      filter (str(?b) > str(?a))
    }
    service <http://localhost:3030/Mondial/sparql> {
      select distinct
        (?a as ?e1) ?p1 ?_p1 (iri(str(?_p1)+"^") as ?__p1)
        (?b as ?e2)
      where {
        {?a ?p0 ?b. bind(uuid() as ?seq) filter (?p0 != rdf:type)}
      	union {?b ?_p0 ?a. bind(uuid() as ?seq) filter (?_p0 != rdf:type)}
      }
    }
  }

  union {  # busca caminhos de distância 2
    {
      {graph kwsg:seeds {[] rdfs:member ?a.}}
      {graph kwsg:seeds {[] rdfs:member ?b.}}
      filter (str(?b) > str(?a))
    }
    service <http://localhost:3030/Mondial/sparql> {
      select distinct
        (?a as ?e1) ?p1 ?_p1 (iri(str(?_p1)+"^") as ?__p1)
        (?s1 as ?e2) ?p2 ?_p2 (iri(str(?_p2)+"^") as ?__p2)
        (?b as ?e3)
      where {
        {?a ?p1 ?s1. ?s1 ?p3 ?b. bind(uuid() as ?seq) filter ((?p1 != rdf:type) && (?p3 != rdf:type))}
      	union {?a ?p1 ?s1. ?b ?_p3 ?s1. ?s1 ?p []. bind(uuid() as ?seq) filter ((?p1 != rdf:type) && (?_p3 != rdf:type))}
      	union {?s1 ?_p1 ?a. ?s1 ?p3 ?b. bind(uuid() as ?seq) filter ((?_p1 != rdf:type) && (?_p3 != rdf:type))}
      	union {?s1 ?_p1 ?a. ?b ?_p3 ?s1. bind(uuid() as ?seq) filter ((?_p1 != rdf:type) && (?_p3 != rdf:type))}
      }
    }
  }
  union {  # busca caminhos de distância 3
    {
      {graph kwsg:seeds {[] rdfs:member ?a.}}
      {graph kwsg:seeds {[] rdfs:member ?b.}}
      filter (str(?b) > str(?a))
    }
    service <http://localhost:3030/Mondial/sparql>{
        select distinct
            (?a as ?e1) ?p1 ?_p1 (iri(str(?_p1)+"^") as ?__p1)
            (?s1 as ?e2) ?p2 ?_p2 (iri(str(?_p2)+"^") as ?__p2)
            (?s2 as ?e3) ?p3 ?_p3 (iri(str(?_p3)+"^") as ?__p3)
            (?b as ?e4)
        where {
            {?a ?p1 ?s1. ?s2 ?p3 ?b. ?s1 ?p2 ?s2. bind(uuid() as ?seq) filter ((?p1 != rdf:type) && (?p2 != rdf:type) && (?p3 != rdf:type))}
            union {?a ?p1 ?s1. ?b ?_p3 ?s2. ?s2 ?p []. ?s1 ?p2 ?s2. bind(uuid() as ?seq) filter ((?p1 != rdf:type) && (?p2 != rdf:type) && (?_p3 != rdf:type))}
            union {?a ?p1 ?s1. ?s1 ?p []. ?s2 ?p3 ?b. ?s2 ?_p2 ?s1. bind(uuid() as ?seq) filter ((?p1 != rdf:type) && (?_p2 != rdf:type) && (?p3 != rdf:type))}
            union {?a ?p1 ?s1. ?s1 ?p []. ?b ?_p3 ?s2. ?s2 ?_p2 ?s1. bind(uuid() as ?seq) filter ((?p1 != rdf:type) && (?_p2 != rdf:type) && (?_p3 != rdf:type))}
            union {?s1 ?_p1 ?a. ?s2 ?p3 ?b. ?s1 ?p2 ?s2. bind(uuid() as ?seq) filter ((?_p1 != rdf:type) && (?p2 != rdf:type) && (?p3 != rdf:type))}
            union {?s1 ?_p1 ?a. ?b ?_p3 ?s2. ?s2 ?p []. ?s1 ?p2 ?s2. bind(uuid() as ?seq) filter ((?_p1 != rdf:type) && (?p2 != rdf:type) && (?_p3 != rdf:type))}
            union {?s1 ?_p1 ?a. ?s2 ?p3 ?b. ?s2 ?_p2 ?s1. bind(uuid() as ?seq) filter ((?_p1 != rdf:type) && (?_p2 != rdf:type) && (?p3 != rdf:type))}
            union {?s1 ?_p1 ?a. ?b ?_p3 ?s2. ?s2 ?_p2 ?s1. bind(uuid() as ?seq) filter ((?_p1 != rdf:type) && (?_p2 != rdf:type) && (?_p3 != rdf:type))}
        }
    }
  }
};

#################################################
# calcular scores das entidades selecionadas.   #
#################################################

insert {graph kwsg:temp {?e kws:score ?score; rdfs:label ?label; kws:comment ?comment.}}
where {
  {select distinct ?e where {graph kwsg:temp {[] rdfs:member ?e.}}}
  optional {
    service <http://localhost:3030/Mondial/sparql> {
    graph kwsg:indexed {(?e ?score) text:query '%1$s'.}
    }
  }
  optional {
    service <http://localhost:3030/Mondial/sparql> {
      {?e rdfs:label ?label.}
    }
  }
  optional {
    service <http://localhost:3030/Mondial/sparql> {
      graph kwsg:indexed {?e kws:comment ?comment.}
    }
  }
};

insert {graph kwsg:temp {?s kws:comment ?comment.}}
using kwsg:temp
where {
  select ?s (group_concat(?_comment) as ?comment)
  where {
    ?s a rdf:Seq; rdfs:member ?m. ?m kws:comment ?_comment.
  }
  group by ?s
};



