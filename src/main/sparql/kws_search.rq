prefix : <urn:vocab:kws:>
prefix kws: <urn:vocab:kws:>
prefix kwsg: <urn:graph:kws:>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix text: <http://jena.apache.org/text#>

drop all;

###################################
# selecionar entidades relevantes #
###################################

with kwsg:seeds
insert {?bag a rdf:Bag; rdfs:member ?s.}
where {
  {bind(bnode() as ?bag)}
  service <http://localhost:3030/Mondial/sparql> {graph kwsg:indexed {?s text:query ('%1$s' 10).}}
};

###################################################
# identificar ligacoes entre entidades relevantes #
###################################################

with kwsg:temp
insert {
    [] a rdf:Seq;
        rdf:_1 ?e1; rdf:_2 ?p1; rdf:_2 ?__p1;
        rdf:_3 ?e2; rdf:_4 ?p2; rdf:_4 ?__p2;
        rdf:_5 ?e3; rdf:_6 ?p3; rdf:_6 ?__p3;
        rdf:_7 ?e4.
    ?e1 ?p1 ?e2. ?e2 ?p2 ?e3. ?e3 ?p3 ?e4.
    ?e4 ?_p3 ?e3. ?e3 ?_p2 ?e2. ?e2 ?_p1 ?e1.
}
using kwsg:seeds
where {
  { # busca caminhos de distância 1
    {
      [] rdfs:member ?e1.
      [] rdfs:member ?e2.
      filter (str(?e2) > str(?e1))
    }
    service <http://localhost:3030/Mondial/sparql> {
      select *
      where {
        {?e1 ?p1 ?e2. filter (?p1 != rdf:type)}
      	union {?e2 ?_p1 ?e1. filter (?_p1 != rdf:type)}
        bind (iri(str(?_p1)+"_") as ?__p1)
      }
    }
  }

  union { # busca caminhos de distância 2
    {
      [] rdfs:member ?e1.
      [] rdfs:member ?e3.
      filter (str(?e3) > str(?e1))
    }
    service <http://localhost:3030/Mondial/sparql> {
      select *
      where {
        {{?e1 ?p1 ?e2. filter(?p1 != rdf:type && ?e2 not in (?e1))} {?e2 ?p2 ?e3. filter(?p2 != rdf:type)}}
        union {{?e1 ?p1 ?e2. filter(?p1 != rdf:type && ?e2 not in (?e1))} {?e3 ?_p2 ?e2. ?e2 ?p []. filter(?_p2 != rdf:type)}}
        union {{?e2 ?_p1 ?e1. filter(?_p1 != rdf:type && ?e2 not in (?e1))} {?e2 ?p2 ?e3. filter(?p2 != rdf:type)}}
        union {{?e2 ?_p1 ?e1. filter(?_p1 != rdf:type && ?e2 not in (?e1))} {?e3 ?_p2 ?e2. filter(?_p2 != rdf:type)}}
        bind (iri(str(?_p1)+"_") as ?__p1)
        bind (iri(str(?_p2)+"_") as ?__p2)
      }
    }
  }
  union { # busca caminhos de distância 3
    {
      [] rdfs:member ?e1.
      [] rdfs:member ?e4.
      filter (str(?e4) > str(?e1))
    }
    service <http://localhost:3030/Mondial/sparql>{
        select *
        where {
        	{{?e1 ?p1 ?e2. filter(?p1 != rdf:type && ?e2 not in (?e1))} {?e3 ?p3 ?b. filter(?p3 != rdf:type && ?e3 not in (?e1,?e2))} {?e2 ?p2 ?e3 filter (?p2 != rdf:type)}.}
        	union {{?e1 ?p1 ?e2. filter(?p1 != rdf:type && ?e2 not in (?e1))} {?e4 ?_p3 ?e3. filter(?_p3 != rdf:type && ?e3 not in (?e1,?e2))} ?e3 ?p []. {?e2 ?p2 ?e3. filter (?p2 != rdf:type)}}
        	union {{?e1 ?p1 ?e2. filter(?p1 != rdf:type && ?e2 not in (?e1))} ?e2 ?p []. {?e3 ?p3 ?b. filter(?p3 != rdf:type && ?e3 not in (?e1,?e2))} {?e3 ?_p2 ?e2. filter (?_p2 != rdf:type )}}
        union {{?e1 ?p1 ?e2. filter(?p1 != rdf:type && ?e2 not in (?e1))} ?e2 ?p []. {?e4 ?_p3 ?e3. filter(?_p3 != rdf:type && ?e3 not in (?e1,?e2))} {?e3 ?_p2 ?e2. filter (?_p2 != rdf:type)}}
        	union {{?e2 ?_p1 ?e1. filter(?_p1 != rdf:type && ?e2 not in (?e1))} {?e3 ?p3 ?b. filter(?p3 != rdf:type && ?e3 not in (?e1,?e2))} {?e2 ?p2 ?e3. filter (?p2 != rdf:type)}}
        union {{?e2 ?_p1 ?e1. filter(?_p1 != rdf:type && ?e2 not in (?e1))} {?e4 ?_p3 ?e3. filter(?_p3 != rdf:type && ?e3 not in (?e1,?e2))} ?e3 ?p []. {?e2 ?p2 ?e3. filter(?p2 != rdf:type)}}
        	union {{?e2 ?_p1 ?e1. filter(?_p1 != rdf:type && ?e2 not in (?e1))} {?e3 ?p3 ?b. filter(?p3 != rdf:type && ?e3 not in (?e1,?e2))} {?e3 ?_p2 ?e2. filter(?_p2 != rdf:type)}}
        union {{?e2 ?_p1 ?e1. filter(?_p1 != rdf:type && ?e2 not in (?e1))} {?e4 ?_p3 ?e3. filter(?_p3 != rdf:type && ?e3 not in (?e1,?e2))} {?e3 ?_p2 ?e2. filter(?_p2 != rdf:type)}}
        bind (iri(str(?_p1)+"_") as ?__p1)
        bind (iri(str(?_p2)+"_") as ?__p2)
        bind (iri(str(?_p3)+"_") as ?__p3)
        }
    }
  }
};

###############################################
# recuperar dados das entidades selecionadas. #
###############################################

with kwsg:temp
insert {?e rdfs:label ?label; kws:comment ?comment.}
using kwsg:temp
where {
  {select distinct ?e where {[a rdf:Seq] rdfs:member ?e; ?p ?e. filter (?p in (rdf:_1,rdf:_3,rdf:_5,rdf:_7))}}
  optional {service <http://localhost:3030/Mondial/sparql> {?e rdfs:label ?label.}}
  optional {service <http://localhost:3030/Mondial/sparql> {graph kwsg:indexed {?e kws:comment ?comment.}}}
};

with kwsg:temp
insert {?s kws:comment ?comment.}
using kwsg:temp
where {
  select ?s (group_concat(?_comment) as ?comment)
  where {?s a rdf:Seq; rdfs:member ?m. ?m kws:comment ?_comment.}
  group by ?s
};




##################################
# Separar entidades encontradas. #
##################################

with kwsg:ent
insert {?bag a rdf:Bag; rdfs:member ?m. ?m kws:comment ?comment.}
using kwsg:temp
where {
    {bind(bnode() as ?bag)}
    {select distinct ?m where {[a rdf:Seq] rdfs:member ?m; ?p ?m. filter (?p in (rdf:_1,rdf:_3,rdf:_5,rdf:_7))}}
    {?m kws:comment ?comment.}
};


with kwsg:ent2
insert {
  ?bag a rdf:Bag;
    kws:comment ?comment;
    rdfs:member ?m1;
    rdfs:member ?m2;
    rdfs:member ?m3;
    rdfs:member ?m4;
    rdfs:member ?m4;
    .
}
using kwsg:ent
where {
  {select ?bag (concat(?comment1," ",?comment2) as ?comment) ?size ?m1 ?m2
    where {
      [] rdfs:member ?m1. optional{?m1 kws:comment ?comment1.}
      [] rdfs:member ?m2. optional{?m2 kws:comment ?comment2.}
      filter (str(?m2)>str(?m1))
      bind(bnode() as ?bag)
      bind(2 as ?size)
    }
  }
  union {
    select ?bag (concat(?comment1," ",?comment2," ",?comment3) as ?comment) ?size ?m1 ?m2 ?m3
    where {
      [] rdfs:member ?m1. optional{?m1 kws:comment ?comment1.}
      [] rdfs:member ?m2. optional{?m2 kws:comment ?comment2.}
      [] rdfs:member ?m3. optional{?m3 kws:comment ?comment3.}
      filter (str(?m2)>str(?m1)
        && str(?m3)>str(?m2))
      bind(bnode() as ?bag)
      bind(3 as ?size)
    }
  }
  union {
    select ?bag (concat(?comment1," ",?comment2," ",?comment3," ",?comment4) as ?comment) ?size ?m1 ?m2 ?m3 ?m4
    where {
      [] rdfs:member ?m1. optional{?m1 kws:comment ?comment1.}
      [] rdfs:member ?m2. optional{?m2 kws:comment ?comment2.}
      [] rdfs:member ?m3. optional{?m3 kws:comment ?comment3.}
      [] rdfs:member ?m4. optional{?m4 kws:comment ?comment4.}
      filter (str(?m2)>str(?m1)
        && str(?m3)>str(?m2)
        && str(?m4)>str(?m3))
      bind(bnode() as ?bag)
      bind(4 as ?size)
    }
  }
  union {
    select ?bag (concat(?comment1," ",?comment2," ",?comment3," ",?comment4," ",?comment5) as ?comment) ?m1 ?m2 ?m3 ?m4 ?m5
    where {
      [] rdfs:member ?m1. optional{?m1 kws:comment ?comment1.}
      [] rdfs:member ?m2. optional{?m2 kws:comment ?comment2.}
      [] rdfs:member ?m3. optional{?m3 kws:comment ?comment3.}
      [] rdfs:member ?m4. optional{?m4 kws:comment ?comment4.}
      [] rdfs:member ?m5. optional{?m5 kws:comment ?comment5.}
      filter (str(?m2)>str(?m1)
        && str(?m3)>str(?m2)
        && str(?m4)>str(?m3)
        && str(?m5)>str(?m4))
      bind(bnode() as ?bag)
      bind(5 as ?size)
    }
  }
};


